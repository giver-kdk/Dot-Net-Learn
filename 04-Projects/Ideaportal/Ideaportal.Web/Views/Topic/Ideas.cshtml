@model Application.ViewModels.IdeaViewModel

@{
    Layout = "";
}


<html>
<head>
    <title>IdeaPool - The Repository of Ideas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/site.css" />
</head>
<body>


    <header class="header flex items-center bg-gray-100 p-4 shadow-md">
        <a href="/">
            <img src="~/images/spiral_logo.png" class="w-12 h-12 mr-4" alt="Spiralogics Logo" />
        </a>
        <div>
            <div class="logo text-xl font-semibold text-gray-800">@Model.Topic.Title </div>

        </div>

        <nav class="bg-white-800 p-4">
            <ul class="flex space-x-4 text-white">
                <li><a href="/topics/{{topic.id}}" class="navitem">Home</a></li>
                <li><a href="/topics/my_ideas/{{topic.id}}" class="navitem">My Ideas</a></li>
                <li><a href="/topics/dropped_ideas/{{topic.id}}" class="navitem">Dropped Ideas</a></li>
            </ul>
        </nav>

        <!-- User Greeting & Logout Form -->
        <div class="ml-auto flex items-center space-x-4">
            <!-- Greeting with styling -->
            <!-- Logout Button -->
            <!-- Logout Button -->
            <div class="ml-auto flex items-center space-x-4">
                <div class="ml-auto flex items-center space-x-4">
                    <span><p class="greeting"> @User.Identity.Name</p></span>
                    <form action="@Url.Action("Logout", "Account")" method="post" class="flex items-center space-x-2">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="bg-red-500 text-white py-1 px-3 mt-4 rounded-full hover:bg-red-600 transition duration-300">Log Out</button>
                    </form>
                </div>
            </div>
    </header>



    <main class="idea-pool">
        <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

        @if (Model.ShowAddBtn)
        {
            <div class="idea-bubble add-idea">+</div>
        }
        else
        {
            <div hidden class="idea-bubble add-idea">+</div>
        }

        @if (Model.Ideas.Count == 0)
        {
            <div id="no-idea" class="idea-bubble">No Ideas Yet</div>
        }

    </main>


    <div id="confirmationModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
        <div class="bg-white p-6 rounded-lg w-80 shadow-lg text-center">
            <p id="modalMessage" class="text-lg mb-4"></p>

            <!-- Additional Buttons will be injected here -->
            <div id="additionalButtons" class="flex justify-center gap-4"></div>

            <!-- Close Button -->
            <button id="closeButton" class="mt-4 px-4 py-2 bg-gray-300 text-black rounded hover:bg-gray-400 hidden">Close</button>
        </div>
    </div>
    @if (Model.ShowTrash)
    {
        <div class="bucket-container">
            <div class="bucket" id="ideaBucket">
                <svg viewBox="0 0 100 120" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                        <!-- Metallic gradient for the can -->
                        <linearGradient id="metallic" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" style="stop-color:#A8A8A8" />
                            <stop offset="40%" style="stop-color:#EFEFEF" />
                            <stop offset="60%" style="stop-color:#EFEFEF" />
                            <stop offset="100%" style="stop-color:#A8A8A8" />
                        </linearGradient>
                        <!-- Highlight gradient -->
                        <linearGradient id="highlight" x1="0%" y1="0%" x2="0%" y2="100%">
                            <stop offset="0%" style="stop-color:rgba(255,255,255,0.7)" />
                            <stop offset="100%" style="stop-color:rgba(255,255,255,0)" />
                        </linearGradient>
                        <!-- Lid gradient -->
                        <linearGradient id="lidGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" style="stop-color:#999" />
                            <stop offset="40%" style="stop-color:#CCC" />
                            <stop offset="60%" style="stop-color:#CCC" />
                            <stop offset="100%" style="stop-color:#999" />
                        </linearGradient>
                    </defs>

                    <!-- Trash can body -->
                    <g class="trash-body">
                        <!-- Main body -->
                        <path d="M25 35 L30 100 Q50 105 70 100 L75 35" fill="url(#metallic)" />
                        <!-- Vertical lines -->
                        <path d="M40 40 L43 95" stroke="#CCC" stroke-width="1" fill="none" />
                        <path d="M50 40 L50 95" stroke="#CCC" stroke-width="1" fill="none" />
                        <path d="M60 40 L57 95" stroke="#CCC" stroke-width="1" fill="none" />
                        <!-- Highlight -->
                        <path d="M25 35 L30 100 Q50 105 70 100 L75 35" fill="url(#highlight)" opacity="0.3" />
                    </g>

                    <!-- Trash can lid -->
                    <g class="trash-lid">
                        <!-- Lid base -->
                        <path d="M20 35 L80 35 Q75 30 70 28 L30 28 Q25 30 20 35" fill="url(#lidGradient)" />
                        <!-- Lid top -->
                        <path d="M30 28 L70 28 Q65 25 60 23 L40 23 Q35 25 30 28" fill="url(#lidGradient)" />
                        <!-- Lid highlight -->
                        <path d="M30 28 L70 28 Q65 25 60 23 L40 23 Q35 25 30 28" fill="url(#highlight)" opacity="0.3" />
                    </g>
                </svg>
                <div class="bucket-label">Trash</div>
            </div>
        </div>
    }

    <div id="addIdeaModal" class="modal hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="modal-content bg-white rounded-lg shadow-lg p-6 w-96 relative">
            <span class="close absolute top-4 right-4 text-gray-500 cursor-pointer hover:text-gray-800">&times;</span>
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Add New Idea</h2>
            <input type="text"
                   id="newIdeaInput"
                   placeholder="Enter your idea here..."
                   class="w-full border border-gray-300 rounded-lg p-2 mb-4 focus:outline-none focus:ring focus:ring-blue-300">
            <textarea id="description"
                      placeholder="Enter Description ..."
                      class="w-full border border-gray-300 rounded-lg p-2 mb-4 focus:outline-none focus:ring focus:ring-blue-300"
                      rows="3"></textarea>
            <button id="submitIdea"
                    class="bg-blue-500 text-white rounded-lg px-4 py-2 w-full hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300">
                Add Idea
            </button>
        </div>
    </div>

    <script>
        function showConfirmation(message, callbackPositive, callbackNegative, positiveButtonName = "Yes", negativeButtonName = "No", values = {}) {
        const modalOverlay = document.getElementById("confirmationModal");
        const modalMessage = document.getElementById("modalMessage");
        const additionalButtons = document.getElementById("additionalButtons");
        const closeButton = document.getElementById("closeButton");

        // Set the message
        modalMessage.textContent = message;

        // Reset buttons
        additionalButtons.innerHTML = "";

        if (callbackPositive && callbackNegative) {
        // Show Yes/No buttons
        const positiveButton = document.createElement("button");
        positiveButton.textContent = positiveButtonName;
        positiveButton.className = "px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600";
        positiveButton.onclick = function() {
        callbackPositive(values);  // Pass values to the positive callback
        modalOverlay.classList.add("hidden"); // Close modal after action
        };

        const negativeButton = document.createElement("button");
        negativeButton.textContent = negativeButtonName;
        negativeButton.className = "px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600";
        negativeButton.onclick = function() {
        callbackNegative(values);  // Pass values to the negative callback
        modalOverlay.classList.add("hidden"); // Close modal after action
        };

        additionalButtons.appendChild(positiveButton);
        additionalButtons.appendChild(negativeButton);
        } else if (callbackPositive) {
        // Show single button if only one callback is provided
        const positiveButton = document.createElement("button");
        positiveButton.textContent = positiveButtonName;
        positiveButton.className = "px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600";
        positiveButton.onclick = function() {
        callbackPositive(values);  // Pass values to the positive callback
        modalOverlay.classList.add("hidden"); // Close modal after action
        };
        additionalButtons.appendChild(positiveButton);
        } else {
        // Show close button if no callback is provided
        closeButton.style.display = "inline-block";
        closeButton.onclick = function() {
        modalOverlay.classList.add("hidden"); // Close modal after action
        };
        }

        // Show modal
        modalOverlay.classList.remove("hidden");
        }

    </script>
    <script>

        function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
        }


        const addIdea=function(idea) {
        const newIdea = idea.name;

        const newBubble = document.createElement('div');
        const userIndicator = document.createElement('div');
        userIndicator.classList.add("user-indicator");
        let noIdea= document.getElementById("no-idea")
        if(noIdea){
        noIdea.remove();
        }
        const userName = document.createElement('span');
        userName.classList.add('user-name');
        // userName.innerHTML = "@(User.Identity.Name)";

        userIndicator.appendChild(userName);
        newBubble.appendChild(userIndicator);
        newBubble.className = 'idea-bubble floating';
        newBubble.textContent = newIdea;
        newBubble.setAttribute('draggable', 'true');
        newBubble.addEventListener("click",function(){
        window.location="/topics/@(Model.Topic.Id)/ideas/"+idea.id;
        })
        newBubble.style.animationDelay = `${Math.random() * 4}s`;
        document.querySelector('.add-idea').parentNode.insertBefore(newBubble, document.querySelector('.add-idea'));

        }


        function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');

        // Create the toast div
        const toast = document.createElement('div');
        toast.classList.add(
        'transition-all',
        'duration-300',
        'transform',
        'opacity-0',
        'p-4',
        'rounded-lg',
        'shadow-lg',
        'w-72',
        'mb-4'
        );

        // Apply classes based on type
        if (type === 'success') {
        toast.classList.add('bg-green-500', 'text-white');
        } else if (type === 'error') {
        toast.classList.add('bg-red-500', 'text-white');
        }

        // Set message
        toast.textContent = message;

        // Add the toast to the container
        toastContainer.appendChild(toast);

        // Trigger the animation to show the toast
        setTimeout(() => {
        toast.classList.remove('opacity-0');
        toast.classList.add('opacity-100');
        }, 100);

        // Automatically remove the toast after 4 seconds
        setTimeout(() => {
        toast.classList.remove('opacity-100');
        toast.classList.add('opacity-0');
        setTimeout(() => {
        toast.remove();
        }, 300); // Fade-out duration
        }, 4000); // Duration to show the toast
        }

        // Modal functionality
        const modal = document.getElementById("addIdeaModal");
        const addButton = document.querySelector(".add-idea");
        const closeButton = document.querySelector(".close");
        const submitButton = document.getElementById("submitIdea");
        const newIdeaInput = document.getElementById("newIdeaInput");

        submitButton.onclick=function(e){
        e.preventDefault();
        let ideaInput= document.getElementById("newIdeaInput");
        let ideaDescription = document.getElementById("description");

        let idea = {"name":ideaInput.value,"description":ideaDescription.value,"id":getRandomInt(3,1000)};

        ideaInput.value=""
        ideaDescription.value=""
        console.log(ideaInput.value);
        console.log(ideaDescription.value);

        showToast("Idea Added successfully","success");
        modal.style.display="none";
        // This includes the protocol (http:// or https://) and domain

        fetch(`${window.location.origin}/topics/@(Model.Topic.Id)/idea/create/`, {
        method: 'POST', // HTTP method (GET, POST, PUT, DELETE, etc.)
        headers: {
        'Content-Type': 'application/json', // Set content type for the request
        },
        body:JSON.stringify(idea)
        })
        .then(response => {
        if (!response.ok) {
        showToast("couldn't add the idea","error");
        throw new Error('Network response was not ok');
        }
        return response.json(); // Parse the JSON response body
        })
        .then(data => {
        console.log('Response data:', data); // Handle the data
        idea.id=data.id
        addIdea(idea);
        })
        .catch(error => {
        console.error('There was a problem with the fetch operation:', error);
        });






        }

        addButton.onclick = function() {
        modal.style.display = "block";
        }

        closeButton.onclick = function() {
        modal.style.display = "none";
        }

        window.onclick = function(event) {
        if (event.target == modal) {
        modal.style.display = "none";
        }
        }

        // Drag and Drop functionality
        document.addEventListener('DOMContentLoaded', function() {
        const bucket = document.getElementById('ideaBucket');

        function handleDragStart(e) {
        if (!e.target.classList.contains('idea-bubble') || e.target.classList.contains('add-idea')) return;
        e.target.classList.add('dragging');
        e.dataTransfer.setData('text/plain', e.target.getAttribute("id"));
        }

        function handleDragEnd(e) {
        if (!e.target.classList.contains('idea-bubble')) return;
        e.target.classList.remove('dragging');
        }

        function handleDragOver(e) {
        e.preventDefault();
        bucket.classList.add('drag-over');
        bucket.querySelector('.bucket-label').style.opacity = '1';
        }

        function handleDragLeave(e) {
        bucket.classList.remove('drag-over');
        bucket.querySelector('.bucket-label').style.opacity = '0';
        }

        function handleDrop(e) {
        e.preventDefault();
        bucket.classList.remove('drag-over');
        bucket.querySelector('.bucket-label').style.opacity = '0';
        const droppedElement = document.querySelector('.dragging');

        if (droppedElement) {
        // Add animation and remove the element
        droppedElement.style.transition = 'all 0.3s ease';
        droppedElement.style.transform = 'scale(0)';

        let id=droppedElement.getAttribute("id")
        let idea ={"id":id}

        fetch(`${window.location.origin}/idea/drop`,{
        method:"POST",
        headers: {
        'Content-Type': 'application/json', // Set content type for the request
        },

        body:JSON.stringify(idea)
        }
        ).then(response=>{
        if (!response.ok) {
        showToast("couldn't add the idea","error");
        throw new Error('Network response was not ok');
        }
        return response.json();
        })
        .then(data=>{
        console.log('Response data:', data); // Handle the data
        droppedElement.remove();
        showToast("Idea dropped successfully")
        })
        .catch(error => {
        console.error('There was a problem with the fetch operation:', error);
        });


        }
        }

        // Add drag and drop event listeners
        document.addEventListener('dragstart', handleDragStart);
        document.addEventListener('dragend', handleDragEnd);
        bucket.addEventListener('dragover', handleDragOver);
        bucket.addEventListener('dragleave', handleDragLeave);
        bucket.addEventListener('drop', handleDrop);

        // Make idea bubbles draggable
        function makeIdeaBubblesDraggable() {
        document.querySelectorAll('.idea-bubble:not(.add-idea)').forEach(bubble => {
        bubble.setAttribute('draggable', 'true');
        });
        }

        // Initial setup
        makeIdeaBubblesDraggable();

        // Observer for new bubbles
        const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
        if (mutation.addedNodes.length) {
        makeIdeaBubblesDraggable();
        }
        });
        });

        observer.observe(document.querySelector('.idea-pool'), {
        childList: true
        });
        });

    </script>

    @foreach (var idea in Model.Ideas)
    {
        <script>
                (function() {
               const newIdea = "@(idea.Name)"
               if (newIdea) {
                 const newBubble = document.createElement('div');
                 newBubble.className = 'idea-bubble floating';
                 newBubble.textContent = newIdea;
                 const userIndicator = document.createElement('div');
                 userIndicator.classList.add("user-indicator");
                 const userName = document.createElement('span');
                 userName.classList.add('user-name');
                 @* userName.innerHTML = "@User.Identity.Name"; *@

                 userIndicator.appendChild(userName);
                 newBubble.appendChild(userIndicator);
                 newBubble.setAttribute('draggable', 'true');
                 newBubble.setAttribute("id","@(idea.Id)")
                 newBubble.addEventListener("click",function(){
                  window.location="/topics/@(Model.Topic.Id)/ideas/@(idea.Id)"
                 })
                 newBubble.style.animationDelay = `${Math.random() * 4}s`;
                 document.querySelector('.add-idea').parentNode.insertBefore(newBubble, document.querySelector('.add-idea'));
               }
            })();
        </script>
    }
</body>
</html>
