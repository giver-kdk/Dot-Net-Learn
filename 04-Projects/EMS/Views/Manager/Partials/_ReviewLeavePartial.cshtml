@using EMS.Domain.Enums
@model List<EMS.Domain.Models.LeaveRequest>

@foreach (var leaveRequest in Model)
{
    <div class="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden mb-4">
        <div class="p-5">
            <!-- Request Header -->
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2">
                <div class="flex items-center">
                    <span class="text-sm text-gray-500">
                        Submitted: @leaveRequest.RequestDate.ToString("yyyy-MM-dd")
                    </span>
                </div>
                <span class="px-3 py-1 rounded-full text-xs font-medium
                      @(leaveRequest.Status == LeaveStatus.Approved ? "bg-green-100 text-green-800" :
                        leaveRequest.Status == LeaveStatus.Rejected ? "bg-red-100 text-red-800" :
                        "bg-blue-100 text-blue-800")">
                    @leaveRequest.Status.ToString()
                </span>
            </div>

            <!-- Request Details -->
            <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <p class="text-sm text-gray-500">Employee</p>
                    <p class="font-medium">@leaveRequest.Employee.FullName</p>
                    <p class="text-sm text-gray-500">@leaveRequest.Employee.Position</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Leave Type</p>
                    <p class="font-medium">@leaveRequest.LeaveType</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Dates</p>
                    <p class="font-medium">
                        @leaveRequest.StartDate.ToString("MMM d") - @leaveRequest.EndDate.ToString("MMM d")
                        (@((leaveRequest.EndDate - leaveRequest.StartDate).Days + 1) days)
                    </p>
                </div>
            </div>

            <!-- Reason (collapsible) -->
            <div class="mt-4">
                <p class="text-sm text-gray-500">Reason</p>
                <p class="mt-1 text-gray-700 cursor-pointer hover:text-blue-600 transition-colors line-clamp-3 reason-toggle">
                    @leaveRequest.Reason
                </p>
            </div>

            <!-- Rejection Reason (if applicable) -->
            @if (ViewBag.Filter == "Closed" && leaveRequest.Status == LeaveStatus.Rejected)
            {
                <div class="mt-4 p-3 bg-red-50 rounded-md">
                    <p class="text-sm font-medium text-red-800">Rejection Reason</p>
                    <p class="mt-1 text-red-700">@leaveRequest.RejectionReason</p>
                </div>
            }

            <!-- Action Buttons -->
            @if (ViewBag.Filter == "Pending")
            {
                <div class="flex justify-end gap-2 mt-4">
                    <button onclick="acceptLeaveRequest(@leaveRequest.Id)"
                            class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        Accept
                    </button>
                    <button onclick="rejectLeaveRequest(@leaveRequest.Id)"
                            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                        Reject
                    </button>
                </div>
            }
        </div>
    </div>
}

@if (!Model.Any())
{
    <div class="text-center py-10">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900">No leave requests found</h3>
        <p class="mt-1 text-sm text-gray-500">
            @(ViewBag.Filter == "Pending" ? "There are no pending leave requests." : "There are no closed leave requests.")
        </p>
    </div>
}

@functions {
    public string GetStatusClass(LeaveStatus status)
    {
        return status switch
        {
            LeaveStatus.Approved => "status-approved",
            LeaveStatus.Rejected => "status-rejected",
            LeaveStatus.Pending => "status-pending",
            _ => ""
        };
    }
}